---
- name: Grafana | Merge user data with default
  ansible.builtin.set_fact:
    grafana: "{{ grafana_data | combine(grafana, recursive=True) }}"
  tags:
    - always

- name: Grafana | Create storage directory for Grafana
  ansible.builtin.file:
    dest: "{{ grafana_storage }}"
    state: directory
    # TODO(sbog): change it from 0777 to according 0755 and fix user/group ownership
    mode: "0777"
    owner: root
    group: root

- name: Grafana | Provision
  ansible.builtin.include_tasks: provisioning.yml
  loop: "{{ grafana_provisioning_dashboards }}"
  loop_control:
    loop_var: glob

- name: Grafana | Create LDAP config directory
  ansible.builtin.file:
    dest: "{{ grafana_ldap_host_config_path }}"
    state: directory
    mode: "0755"
    owner: root
    group: root

- name: Grafana | Ensure LDAP config
  ansible.builtin.template:
    src: config/ldap.toml.j2
    dest: "{{ grafana_ldap_host_config_path }}/ldap.toml"
    mode: "0644"
    owner: root
    group: root
  when: grafana_ldap_auth_enabled
  tags: ldap

- name: Grafana | Create config ini directory
  ansible.builtin.file:
    dest: "{{ grafana_config_ini_directory }}"
    state: directory
    mode: "0777"
    owner: root
    group: root
  when: grafana_setup_renderer

- name: Grafana | Ensure grafana.ini template
  ansible.builtin.template:
    src: config/grafana.ini.j2
    dest: "{{ grafana_config_ini_directory }}/grafana.ini"
    mode: "0644"
    owner: root
    group: root
  when: grafana_setup_renderer

- name: Grafana | Create renderer config directory
  ansible.builtin.file:
    dest: "{{ grafana_renderer_config_dir }}"
    state: directory
    mode: "0755"
    owner: root
    group: root

- name: Grafana | Ensure renderer config
  ansible.builtin.template:
    src: renderer/config.json.j2
    dest: "{{ grafana_renderer_config_dir }}/config.json"
    mode: "0644"
    owner: root
    group: root
  when: grafana_setup_renderer

- name: Grafana | Generate compose
  set_fact:
    docker_grafana_configuration_services: |
          grafana:
            image: {{ grafana_docker_image }}
            hostname: "{{ grafana_docker_hostname }}"
            labels: {{ grafana.docker_labels }}
            ports:
              - "{{ grafana_port }}:3000"
            volumes: {{ grafana_volumes }}
            environment:
              GF_PATHS_PROVISIONING: /etc/grafana/provisioning
              GF_SECURITY_ADMIN_USER: "{{ grafana.admin_user }}"
              GF_SECURITY_ADMIN_PASSWORD: "{{ grafana.admin_password }}"
              GF_AUTH_LDAP_ENABLED: "{{ grafana_ldap_auth_enabled | string }}"
              GF_AUTH_LDAP_CONFIG_FILE: "{{ grafana_ldap_config_path }}/ldap.toml"
              GF_AUTH_LDAP_ALLOW_SIGN_UP: "{{ grafana_ldap_allow_sign_up | string }}"
              {% if grafana_setup_renderer -%}
              GF_RENDERING_SERVER_URL: http://{{ grafana_renderer_hostname }}:8081/render
              GF_RENDERING_CALLBACK_URL: http://{{ grafana_docker_hostname }}:3000/
              GF_LOG_FILTERS: rendering:debug
              {% endif %}

            {% if not grafana_swarm_cluster or grafana_swarm_manager is undefined -%}
            container_name: {{ grafana_container_name }}
            restart: always
            {% endif %}

            {% if grafana_swarm_cluster or grafana_swarm_manager is defined -%}
            deploy: "{{ grafana_swarm_deploy }}"
            {% endif %}

            {% if grafana_container_networks | length > 0 -%}
            networks: {{ grafana_container_networks.keys() | list | to_yaml  | indent(6) }}
            {% endif %}

          {% if grafana_setup_renderer -%}
          grafana-image-renderer:
            image: {{ grafana_renderer_image }}
            container_name: {{ grafana_container_name }}-renderer
            hostname: "{{ grafana_renderer_hostname }}"
            restart: always
            ports:
              - {{ grafana_renderer_ports }}:8081

            volumes:
              - {{ grafana_renderer_config_dir }}/config.json:/usr/src/app/config.json  

            {% if grafana_container_networks | length > 0 -%}
            networks: {{ grafana_container_networks.keys() | list | to_yaml  | indent(6) }}
            {% endif %}

          {% endif %}

    docker_grafana_networks: |
          {% if grafana_container_networks | length > 0 %}
          {{ grafana_container_networks | to_yaml }}
          {% else %}
          {}
          {% endif %}

    docker_grafana_external_volumes: |
          {% if grafana_external_volumes | length > 0 %}
          {{ grafana_external_volumes | to_yaml }}
          {% else %}
          {}
          {% endif %}

- name: Grafana | Start docker Grafana container
  community.docker.docker_compose_v2:
    project_name: grafana
    definition:
      services: "{{ docker_grafana_configuration_services | from_yaml }}"
      networks: "{{ docker_grafana_networks | from_yaml }}"
  when: not grafana_swarm_cluster or grafana_swarm_manager is undefined

- name: Deploy grafana to docker swarm
  delegate_to: "{{ grafana_swarm_manager }}"
  when:
    - grafana_swarm_cluster
    - grafana_swarm_manager is defined
  block:
    - name: Ensure pip installation
      ansible.builtin.package:
        name: "python3-pip"
        state: present

    - name: Install newer version of pip itself
      ansible.builtin.pip:
        name: "pip"
        state: latest
        executable: pip3

    - name: Install jsondiff from pip
      ansible.builtin.pip:
        name: "jsondiff"
        state: present
        executable: pip3

    - name: Deploy docker grafana container in swarm
      community.docker.docker_stack:
        state: present
        name: "{{ grafana_stack_name }}"
        with_registry_auth: true
        compose:
          - version: '3.5'
            services: "{{ docker_grafana_configuration_services | from_yaml }}"
            networks: "{{ docker_grafana_networks | from_yaml }}"
            volumes: "{{ docker_grafana_external_volumes | from_yaml }}"
      run_once: true

- name: Create new users
  ansible.builtin.uri:
    url: "{{ grafana_url }}/api/admin/users"
    user: "{{ grafana.admin_user }}"
    password: "{{ grafana.admin_password }}"
    force_basic_auth: true
    method: POST
    headers:
      Accept: application/json
      Content-Type: application/json
    body:
      name: "{{ item.name }}"
      email: "{{ item.email }}"
      login: "{{ item.email }}"
      password: "{{ item.password }}"
    body_format: json
  register: result
  failed_when: not (result.status == 200 or (result.status == 412 and result.json.message is regex("^User with email .* or username .* already exists$")))
  changed_when: result.status == 200
  until: result.status != -1
  retries: 5
  with_items: "{{ grafana_user_list }}"
  tags: [add_users]

- name: Import Loki tasks
  ansible.builtin.import_tasks: loki.yml
  when: grafana_loki_install
