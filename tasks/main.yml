---
- name: Grafana | Merge user data with default
  set_fact:
    grafana: "{{ grafana_data | combine(grafana, recursive=True) }}"
  tags:
    - always

- name: Grafana | Create storage directory for Grafana
  file:
    dest: "{{ grafana_storage }}"
    state: directory
    # TODO(sbog): change it from 0777 to according 0755 and fix user/group ownership
    mode: 0777
    owner: root
    group: root

- name: Grafana | Create provisioning directory
  file:
    dest: "{{ item }}"
    state: directory
    mode: 0755
    owner: root
    group: root
  with_items:
    - "{{ grafana_provisioning_dir }}"
    - "{{ grafana_provisioning_dir }}/datasources"
    - "{{ grafana_provisioning_dir }}/dashboards"
    - "{{ grafana_provisioning_dir }}/notifiers"
    - "{{ grafana_provisioning_dir }}/dashboards_list"

- name: Grafana | Ensure datasources
  template:
    src: "{{ item }}"
    dest: "{{ grafana_provisioning_dir }}/datasources/{{ item|basename }}"
    owner: root
    group: root
    mode: 0644
  with_fileglob:
    - "../templates/datasources/*"

- name: Grafana | Ensure dashboards configuration
  template:
    src: dashboards/dashboards.yaml
    dest: "{{ grafana_provisioning_dir }}/dashboards/"
    owner: root
    group: root
    mode: 0644

- name: Grafana | Ensure dashboards themselves
  copy:
    src: "{{ item }}"
    dest: "{{ grafana_provisioning_dir }}/dashboards_list/"
    owner: root
    group: root
    mode: 0644
  with_fileglob:
    - "dashboards/*"

- name: Grafana | Create LDAP config directory
  file:
    dest: "{{ grafana_ldap_host_config_path }}"
    state: directory
    mode: 0755
    owner: root
    group: root

- name: Grafana | Ensure LDAP config
  template:
    src: config/ldap.toml.j2
    dest: "{{ grafana_ldap_host_config_path }}/ldap.toml"
    mode: 0644
    owner: root
    group: root
  when: grafana_ldap_auth_enabled
  tags: ldap

- name: Grafana | Start docker Grafana container
  community.docker.docker_compose:
    project_name: grafana
    definition:
      version: '2'
      services:
        grafana:
          image: "{{ grafana_docker_image }}"
          container_name: "grafana"
          ports:
            - "127.0.0.1:{{ grafana_port }}:3000"
          volumes:
            - "{{ grafana_storage }}:/var/lib/grafana"
            - "{{ grafana_provisioning_dir }}:/etc/grafana/provisioning"
            - "{{ grafana_ldap_host_config_path }}:{{ grafana_ldap_config_path}}"
          hostname: "grafana"
          restart: always
          labels: "{{ grafana.docker_labels }}"
          environment:
            GF_PATHS_PROVISIONING: /etc/grafana/provisioning
            GF_SECURITY_ADMIN_USER: "{{ grafana.admin_user }}"
            GF_SECURITY_ADMIN_PASSWORD: "{{ grafana.admin_password }}"
            GF_AUTH_LDAP_ENABLED: "{{ grafana_ldap_auth_enabled | string }}"
            GF_AUTH_LDAP_CONFIG_FILE: "{{ grafana_ldap_config_path }}/ldap.toml"
            GF_AUTH_LDAP_ALLOW_SIGN_UP: "{{ grafana_ldap_allow_sign_up | string }}"
      networks:
        default:
          external:
            name: "{{ grafana_docker_network_name }}"
  when: not grafana_swarm_cluster or grafana_swarm_manager is undefined

- name: Deploy grafana to docker swarm
  block:
    - name: Ensure pip installation
      package:
        name: "python3-pip"
        state: present

    - name: Install newer version of pip itself
      pip:
        name: "pip"
        state: latest
        executable: pip3

    - name: Install jsondiff from pip
      pip:
        name: "jsondiff"
        state: present
        executable: pip3

    - name: Deploy docker grafana container in swarm
      community.docker.docker_stack:
        state: present
        name: "{{ grafana_stack_name }}"
        compose:
          - version: '3.5'
            services:
              grafana:
                image: "{{ grafana_docker_image }}"
                hostname: "grafana"
                labels: "{{ grafana.docker_labels }}"
                ports:
                  - "{{ grafana_port }}:3000"
                volumes:
                  - "{{ grafana_storage }}:/var/lib/grafana"
                  - "{{ grafana_provisioning_dir }}:/etc/grafana/provisioning"
                  - "{{ grafana_ldap_host_config_path }}:{{ grafana_ldap_config_path}}"
                environment:
                  GF_PATHS_PROVISIONING: /etc/grafana/provisioning
                  GF_SECURITY_ADMIN_USER: "{{ grafana.admin_user }}"
                  GF_SECURITY_ADMIN_PASSWORD: "{{ grafana.admin_password }}"
                  GF_AUTH_LDAP_ENABLED: "{{ grafana_ldap_auth_enabled | string }}"
                  GF_AUTH_LDAP_CONFIG_FILE: "{{ grafana_ldap_config_path }}/ldap.toml"
                  GF_AUTH_LDAP_ALLOW_SIGN_UP: "{{ grafana_ldap_allow_sign_up | string }}"
                deploy: "{{ grafana_swarm_deploy }}"
            networks:
              default:
                external:
                  name: "{{ grafana_docker_network_name }}"
  delegate_to: "{{ grafana_swarm_manager }}"
  when:
    - grafana_swarm_cluster
    - grafana_swarm_manager is defined

- name: Create new users
  uri:
    url: "{{ grafana_url }}/api/admin/users"
    user: "{{ grafana.admin_user }}"
    password: "{{ grafana.admin_password }}"
    force_basic_auth: yes
    method: POST
    headers:
      Accept: application/json
      Content-Type: application/json
    body:
      name: "{{ item.name }}"
      email: "{{ item.email }}"
      login: "{{ item.email }}"
      password: "{{ item.password }}"
    body_format: json
  register: result
  failed_when: not (result.status == 200 or (result.status == 412 and result.json.message is regex("^User with email .* or username .* already exists$")))
  changed_when: result.status == 200
  until: result.status != -1
  retries: 5
  with_items: "{{ grafana_user_list }}"
  tags: [add_users]

- name: Import Loki tasks
  import_tasks: loki.yml
  when: grafana_loki_install